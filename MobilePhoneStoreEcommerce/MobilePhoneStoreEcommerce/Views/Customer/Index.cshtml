@model MobilePhoneStoreEcommerce.Core.ViewModels.CustomerViewModel
@using MobilePhoneStoreEcommerce.Persistence.Consts
@{
	Layout = null;
}


<div class="container">
	<table id="table-orders" class="table table-bordered">
		<thead></thead>
		<tbody></tbody>
	</table>

</div>

<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/bootbox.js"></script>
<script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
<script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>

<script>
    $(document).ready(function () {

        var customerID = @Model.customerID;

        $.ajax({
            url: "/api/Orders/GetList?customerID=" + customerID,
            method: "Get",
            success: function (response) {
                $.ajax({
                    url: "/api/Orders/GetList?customerID=" + customerID + "&orderTime=" + response[0].orderTime,
                    method: "Get",
                    success: function (response) {
                    },
                })
            },

        });

            var table = $("#table-orders").DataTable({
                ajax: {
                    url: "/api/Orders/GetList?customerID=" + customerID,
                    dataSrc: "",
                },
                columns: [
                    {
                        title: "Order ID",
                        data: "orderID",
                        width: "10%",
                        render: function (data) {
                            return data;
                        },
                    },
                    {
                        title: "Order's Time",
                        data: "orderTime",
                        render: function (data) {
                            return data;
                        }
                    },
                    {
                        title: "Status",
                        data: "status",
                        render: function (data) {
                            if (data == @OrderStates.Pending)
                                return "<span>Pending</span>";
                            else if (data == @OrderStates.Confirmed)
                                return "<span>Waiting for delivery</span>";
                            else if (data == @OrderStates.Paid)
                                return "<span>Paid, waiting for delivery</span>";
                            else if (data == @OrderStates.Success)
                                return "<span>Success</span>";
                            else {
                                return "<span>the order was canceled</span>";
                            }
                        }
                    },
                    {
                        title: "Shipping Cost",
                        data: "shippingCost",
                        render: function (data) {
                            return "<span>" + data + " VND</span>";
                        }
                    },
                    {
                        title: "Total Cost",
                        data: "totalOrderCost",
                        render: function (data, type, orderDto) {
                            return "<span>" + standardizedMoneyFormatVND(data + orderDto.shippingCost) + " VND</span>";
                        },
                    },
                    {
                        title: "See details",
                        data: "orderID",
                        render: function (data) {
                            return "<button class='btn-link' data-orderID=" + data + ">Details</button>";
                        },
                    },
                    {
                        title: "Payment",
                        data: "orderID",
                        render: function (data, tupe, order) {
                            if (order.status == @OrderStates.Confirmed)
                                return "<button class='btn btn-success jsPayment' data-orderID=" + order.orderID + ">Payment</button>";

                        return "<button disabled class='btn btn-success' data-orderID=" + data + ">Payment</button>";
                    }
                },
                {
                    title: "Cancel order",
                    data: "orderID",
                    render: function (data, type, order) {
                        if (order.status == @OrderStates.Pending)
                            return "<button class='btn btn-danger jsCancel' data-orderID=" + order.orderID + ">Cancel</button>";

                            return "<button disabled class='btn btn-danger' data-orderID=" + data + ">Cancel</button>";
                        }
                    },
                    {
                        title: "Delete",
                        data: "orderID",
                        render: function (data, type, order) {
                            if (order.status == @OrderStates.Canceled)
                                return "<button class='btn btn-danger jsDelete' data-orderID=" + order.orderID + ">Delete</button>";

                            if (order.status == @OrderStates.Success)
                                return "<span>Success</span>";

                            if (order.status == @OrderStates.Confirmed)
                                return "<span>Confirmed</span>";

                        if (order.status == @OrderStates.Pending)
                            return "<span>Pending</span>";

                        return "<span>Paid</span>"
                    }
                }

            ],
            searching: false,
            info: false,
            ordering: false,
        });

        table.on("click", ".jsCancel", function () {
            var buttonCancel = $(this);

            $.ajax({
                url: "/api/Orders/CancelOrder?orderID=" + buttonCancel.attr("data-orderID"),
                method: "get",
                success: function () {
                    var indexes = table.rows().eq(0).filter(function (rowIdx) {
                        return table.cell(rowIdx, 0).data() == buttonCancel.attr("data-orderID");
                    });
                    var newData = table.row(indexes[0]).data();
                    newData.status = @OrderStates.Canceled;
                    table.row(indexes[0]).data(newData).draw();
                },
            });
        });

        table.on("click", ".jsPayment", function () {
            var buttonPayment = $(this);

            window.location.href = "/Paypal/Payment?orderID=" + buttonPayment.attr("data-orderID");
        })

        table.on("click", ".jsDelete", function () {
            var buttonDelete = $(this);

                $.ajax({
                    url: "/api/Orders/DeleteOrder?orderID=" + buttonDelete.attr("data-orderID"),
                    method: "get",
                    success: function () {
                        table.row(buttonDelete.parents("tr")).remove().draw();
                    },
                });
            })

            function standardizedMoneyFormatVND(money) {
                if ((typeof money) != "string")
                    money = money.toString();

                var standardMoney = "";
                var countTo3 = 1;

                for (var i = money.length - 1; i >= 0; i--) {
                    if (countTo3 < 4) {
                        standardMoney += money[i];
                    } else {
                        countTo3 = 1;
                        standardMoney += ".";
                        standardMoney += money[i];
                    }
                    countTo3 += 1;
                }
                return standardMoney.split("").reverse().join("");
            }
        });



    </script>
</body>
</html>
